*** misc/spirit-1.6.1/boost/spirit/core/composite/epsilon.hpp	2003-07-08 04:19:06.000000000 +0200
--- misc/build/spirit-1.6.1/boost/spirit/core/composite/epsilon.hpp	2005-04-01 15:13:03.768850181 +0200
***************
*** 70,76 ****
  private:
  };
  
! #if BOOST_WORKAROUND(BOOST_MSVC, == 1310) // VC 7.1
  template <typename CondT>
  inline condition_parser<CondT, false>
  operator~(condition_parser<CondT, true> const& p)
--- 70,76 ----
  private:
  };
  
! #if BOOST_WORKAROUND(BOOST_MSVC, == 1310) || BOOST_WORKAROUND(__SUNPRO_CC, BOOST_TESTED_AT(0x550))
  template <typename CondT>
  inline condition_parser<CondT, false>
  operator~(condition_parser<CondT, true> const& p)
*** misc/spirit-1.6.1/boost/spirit/core/impl/match.ipp	2003-07-08 04:19:06.000000000 +0200
--- misc/build/spirit-1.6.1/boost/spirit/core/impl/match.ipp	2005-04-01 15:38:40.744360982 +0200
***************
*** 154,167 ****
              { return nil_t(); }
          };
  
!     #if !defined(__BORLANDC__)
          struct dummy { void nonnull() {}; };
          typedef void (dummy::*safe_bool)();
      #else
          typedef bool safe_bool;
      #endif
  
!     #if !defined(__BORLANDC__)
      #define BOOST_SPIRIT_SAFE_BOOL(cond)  ((cond) ? &impl::dummy::nonnull : 0)
      #else
      #define BOOST_SPIRIT_SAFE_BOOL(cond)  (cond)
--- 154,167 ----
              { return nil_t(); }
          };
  
!     #if !defined(__BORLANDC__) && !defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
          struct dummy { void nonnull() {}; };
          typedef void (dummy::*safe_bool)();
      #else
          typedef bool safe_bool;
      #endif
  
!     #if !defined(__BORLANDC__) && !defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
      #define BOOST_SPIRIT_SAFE_BOOL(cond)  ((cond) ? &impl::dummy::nonnull : 0)
      #else
      #define BOOST_SPIRIT_SAFE_BOOL(cond)  (cond)
*** misc/spirit-1.6.1/boost/spirit/core/scanner/scanner.hpp	2003-07-08 04:19:06.000000000 +0200
--- misc/build/spirit-1.6.1/boost/spirit/core/scanner/scanner.hpp	2005-04-01 15:13:03.769850073 +0200
***************
*** 18,23 ****
--- 18,26 ----
  #include <iterator>
  
  #include "boost/config.hpp"
+ #ifdef BOOST_NO_STD_ITERATOR_TRAITS
+ #include "boost/iterator_adaptors.hpp"
+ #endif
  #include "boost/spirit/core/match.hpp"
  #include "boost/spirit/core/non_terminal/parser_id.hpp"
  
***************
*** 236,245 ****
--- 239,255 ----
      typedef IteratorT iterator_t;
      typedef PoliciesT policies_t;
  
+ #ifdef BOOST_NO_STD_ITERATOR_TRAITS
+     typedef typename boost::detail::iterator_traits<IteratorT>::value_type
+         value_t;
+     typedef typename boost::detail::iterator_traits<IteratorT>::reference
+         ref_t;
+ #else
      typedef typename BOOST_SPIRIT_IT_NS::iterator_traits<IteratorT>::value_type
          value_t;
      typedef typename BOOST_SPIRIT_IT_NS::iterator_traits<IteratorT>::reference
          ref_t;
+ #endif
      typedef typename boost::call_traits<IteratorT>::param_type
          iter_param_t;
  
*** misc/spirit-1.6.1/miniboost/boost/config/compiler/gcc.hpp	2003-07-08 04:19:08.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/config/compiler/gcc.hpp	2005-04-01 15:13:03.769850073 +0200
***************
*** 59,65 ****
  #endif
  //
  // last known and checked version is 3.2:
! #if (__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ > 2))
  #  if defined(BOOST_ASSERT_CONFIG)
  #     error "Unknown compiler version - please run the configure tests and report the results"
  #  else
--- 59,66 ----
  #endif
  //
  // last known and checked version is 3.2:
! // although 3.4 is unchecked, we will give it a try
! #if (__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ > 4))
  #  if defined(BOOST_ASSERT_CONFIG)
  #     error "Unknown compiler version - please run the configure tests and report the results"
  #  else
*** misc/spirit-1.6.1/miniboost/boost/config/compiler/sunpro_cc.hpp	2003-07-08 04:19:08.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/config/compiler/sunpro_cc.hpp	2005-04-01 15:13:03.769850073 +0200
***************
*** 45,52 ****
  #      define BOOST_NO_INTEGRAL_INT64_T
  #    endif
  
! #    if (__SUNPRO_CC <= 0x540) || !defined(BOOST_STRICT_CONFIG)
  #      define BOOST_NO_TEMPLATE_TEMPLATES
  #    endif
  
  #define BOOST_COMPILER "Sun compiler version " BOOST_STRINGIZE(__SUNPRO_CC)
--- 45,57 ----
  #      define BOOST_NO_INTEGRAL_INT64_T
  #    endif
  
! #    if (__SUNPRO_CC <= 0x550) || !defined(BOOST_STRICT_CONFIG)
  #      define BOOST_NO_TEMPLATE_TEMPLATES
+        // see http://lists.boost.org/MailArchives/boost/msg47184.php
+        // and http://lists.boost.org/MailArchives/boost/msg47220.php
+ #      define BOOST_NO_INCLASS_MEMBER_INITIALIZATION
+ #      define BOOST_NO_SFINAE
+ #      define BOOST_NO_ARRAY_TYPE_SPECIALIZATIONS
  #    endif
  
  #define BOOST_COMPILER "Sun compiler version " BOOST_STRINGIZE(__SUNPRO_CC)
*** misc/spirit-1.6.1/miniboost/boost/config/user.hpp	2003-07-08 04:19:08.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/config/user.hpp	2005-04-01 15:13:03.770849965 +0200
***************
*** 66,68 ****
--- 66,74 ----
  // #define BOOST_DISABLE_WIN32
  
  
+ // Switch off exception statements if file is compiled without
+ // exception support:
+ #if defined(EXCEPTIONS_OFF) && !defined(BOOST_NO_EXCEPTIONS)
+ #define BOOST_NO_EXCEPTIONS
+ #endif
+ 
*** misc/spirit-1.6.1/miniboost/boost/optional.hpp	2003-07-08 04:19:09.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/optional.hpp	2005-04-01 15:23:03.764855626 +0200
***************
*** 194,200 ****
--- 194,204 ----
  
      // implicit conversion to "bool"
      // No-throw
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return m_initialized; }
+ #else
      operator unspecified_bool_type() const { return m_initialized ? &this_type::destroy : 0 ; }
+ #endif // defined(__SUNPRO_CC)
  
         // This is provided for those compilers which don't like the conversion to bool
         // on some contexts.
*** misc/spirit-1.6.1/miniboost/boost/scoped_array.hpp	2003-07-08 04:19:08.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/scoped_array.hpp	2005-04-01 15:26:31.066393207 +0200
***************
*** 83,94 ****
--- 83,98 ----
  
      // implicit conversion to "bool"
  
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return ptr != 0; }
+ #else
      typedef T * (this_type::*unspecified_bool_type)() const;
  
      operator unspecified_bool_type() const // never throws
      {
          return ptr == 0? 0: &this_type::get;
      }
+ #endif // defined(__SUNPRO_CC)
  
      bool operator! () const // never throws
      {
*** misc/spirit-1.6.1/miniboost/boost/scoped_ptr.hpp	2003-07-08 04:19:08.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/scoped_ptr.hpp	2005-04-01 15:26:26.796855840 +0200
***************
*** 102,113 ****
--- 102,117 ----
  
      // implicit conversion to "bool"
  
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return ptr != 0; }
+ #else
      typedef T * (this_type::*unspecified_bool_type)() const;
  
      operator unspecified_bool_type() const // never throws
      {
          return ptr == 0? 0: &this_type::get;
      }
+ #endif // defined(__SUNPRO_CC)
  
      bool operator! () const // never throws
      {
*** misc/spirit-1.6.1/miniboost/boost/shared_array.hpp	2003-07-08 04:19:08.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/shared_array.hpp	2005-04-01 15:27:24.476605844 +0200
***************
*** 94,105 ****
--- 94,109 ----
  
      // implicit conversion to "bool"
  
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return px != 0; }
+ #else
      typedef T * (this_type::*unspecified_bool_type)() const;
  
      operator unspecified_bool_type() const // never throws
      {
          return px == 0? 0: &this_type::get;
      }
+ #endif // defined(__SUNPRO_CC)
  
      bool operator! () const // never throws
      {
*** misc/spirit-1.6.1/miniboost/boost/shared_ptr.hpp	2003-07-08 04:19:08.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/shared_ptr.hpp	2005-04-01 15:29:09.319245401 +0200
***************
*** 246,257 ****
--- 246,261 ----
  
      // implicit conversion to "bool"
  
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return px != 0; }
+ #else
      typedef T * (this_type::*unspecified_bool_type)() const;
  
      operator unspecified_bool_type() const // never throws
      {
          return px == 0? 0: &this_type::get;
      }
+ #endif // defined(__SUNPRO_CC)
  
      // operator! is redundant, but some compilers need it
  
*** misc/spirit-1.6.1/miniboost/boost/throw_exception.hpp	2003-07-08 04:19:08.000000000 +0200
--- misc/build/spirit-1.6.1/miniboost/boost/throw_exception.hpp	2005-04-01 15:13:03.770849965 +0200
***************
*** 29,35 ****
  
  #ifdef BOOST_NO_EXCEPTIONS
  
! void throw_exception(std::exception const & e); // user defined
  
  #else
  
--- 29,36 ----
  
  #ifdef BOOST_NO_EXCEPTIONS
  
! // void throw_exception(std::exception const & e); // user defined
! inline void throw_exception(std::exception const &) {}
  
  #else
  
