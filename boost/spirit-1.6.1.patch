*** misc/spirit-1.6.1/boost/spirit/core/composite/actions.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/composite/actions.hpp	Wed Dec  5 10:08:58 2007
***************
*** 11,16 ****
--- 11,21 ----
  #ifndef BOOST_SPIRIT_ACTIONS_HPP
  #define BOOST_SPIRIT_ACTIONS_HPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  #include <algorithm>
  
***************
*** 345,349 ****
--- 350,358 ----
      }
  
  }} // namespace boost::spirit
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif
*** misc/spirit-1.6.1/boost/spirit/core/composite/composite.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/composite/composite.hpp	Wed Dec  5 10:08:58 2007
***************
*** 65,75 ****
          unary(BaseT const& base)
          : base_t(base) {}
  
!         unary(param_t s)
!         : base_t(s) {}
  
!         unary(BaseT const& base, param_t s)
!         : base_t(base, s) {}
  
          return_t
          subject() const
--- 65,75 ----
          unary(BaseT const& base)
          : base_t(base) {}
  
!         unary(param_t _s)
!         : base_t(_s) {}
  
!         unary(BaseT const& _base, param_t _s)
! 		: base_t(_base, _s) {}
  
          return_t
          subject() const
*** misc/spirit-1.6.1/boost/spirit/core/composite/epsilon.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/composite/epsilon.hpp	Wed Dec  5 10:08:58 2007
***************
*** 12,17 ****
--- 12,22 ----
  #ifndef BOOST_SPIRIT_EPSILON_HPP
  #define BOOST_SPIRIT_EPSILON_HPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  ////////////////////////////////////////////////////////////////////////////////
  #if !defined(BOOST_SPIRIT_PARSER_HPP)
  #include "boost/spirit/core/parser.hpp"
***************
*** 70,76 ****
  private:
  };
  
! #if BOOST_WORKAROUND(BOOST_MSVC, == 1310) // VC 7.1
  template <typename CondT>
  inline condition_parser<CondT, false>
  operator~(condition_parser<CondT, true> const& p)
--- 75,81 ----
  private:
  };
  
! #if BOOST_WORKAROUND(BOOST_MSVC, == 1310) || BOOST_WORKAROUND(__SUNPRO_CC, BOOST_TESTED_AT(0x550))
  template <typename CondT>
  inline condition_parser<CondT, false>
  operator~(condition_parser<CondT, true> const& p)
***************
*** 287,291 ****
--- 292,300 ----
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif
*** misc/spirit-1.6.1/boost/spirit/core/composite/impl/composite.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/composite/impl/composite.ipp	Wed Dec  5 10:08:58 2007
***************
*** 112,120 ****
              typedef typename base_t::return_t                   return_t;
  
              subject() : base_t() {}
!             subject(BaseT const& base) : base_t(base) {}
!             subject(param_t s) : base_t(s) {}
!             subject(BaseT const& base, param_t s) : base_t(base, s) {}
          };
  
          //////////////////////////////////
--- 112,120 ----
              typedef typename base_t::return_t                   return_t;
  
              subject() : base_t() {}
!             subject(BaseT const& _base) : base_t(_base) {}
!             subject(param_t _s) : base_t(_s) {}
!             subject(BaseT const& _base, param_t _s) : base_t(_base, _s) {}
          };
  
          //////////////////////////////////
***************
*** 126,134 ****
              typedef typename base_t::return_t                   return_t;
  
              left_subject() : base_t() {}
!             left_subject(BaseT const& base) : base_t(base) {}
!             left_subject(param_t s) : base_t(s) {}
!             left_subject(BaseT const& base, param_t s) : base_t(base, s) {}
  
              return_t
              left() const { return base_t::get(); }
--- 126,134 ----
              typedef typename base_t::return_t                   return_t;
  
              left_subject() : base_t() {}
!             left_subject(BaseT const& _base) : base_t(_base) {}
!             left_subject(param_t _s) : base_t(_s) {}
!             left_subject(BaseT const& _base, param_t _s) : base_t(_base, _s) {}
  
              return_t
              left() const { return base_t::get(); }
***************
*** 143,151 ****
              typedef typename base_t::return_t                   return_t;
  
              right_subject() : base_t() {}
!             right_subject(BaseT const& base) : base_t(base) {}
!             right_subject(param_t s) : base_t(s) {}
!             right_subject(BaseT const& base, param_t s) : base_t(base, s) {}
  
              return_t
              right() const { return base_t::get(); }
--- 143,151 ----
              typedef typename base_t::return_t                   return_t;
  
              right_subject() : base_t() {}
!             right_subject(BaseT const& _base) : base_t(_base) {}
!             right_subject(param_t _s) : base_t(_s) {}
!             right_subject(BaseT const& _base, param_t _s) : base_t(_base, _s) {}
  
              return_t
              right() const { return base_t::get(); }
*** misc/spirit-1.6.1/boost/spirit/core/composite/impl/operators.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/composite/impl/operators.ipp	Wed Dec  5 10:08:58 2007
***************
*** 12,17 ****
--- 12,21 ----
  #if !defined(BOOST_SPIRIT_OPERATORS_IPP)
  #define BOOST_SPIRIT_OPERATORS_IPP
  
+ #if defined __SUNPRO_CC
+ #pragma disable_warn
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  namespace boost { namespace spirit {
  
***************
*** 664,668 ****
--- 668,676 ----
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
+ 
+ #if defined __SUNPRO_CC
+ #pragma enable_warn
+ #endif
  
  #endif
*** misc/spirit-1.6.1/boost/spirit/core/impl/match.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/impl/match.ipp	Wed Dec  5 10:08:58 2007
***************
*** 154,167 ****
              { return nil_t(); }
          };
  
!     #if !defined(__BORLANDC__)
          struct dummy { void nonnull() {}; };
          typedef void (dummy::*safe_bool)();
      #else
          typedef bool safe_bool;
      #endif
  
!     #if !defined(__BORLANDC__)
      #define BOOST_SPIRIT_SAFE_BOOL(cond)  ((cond) ? &impl::dummy::nonnull : 0)
      #else
      #define BOOST_SPIRIT_SAFE_BOOL(cond)  (cond)
--- 154,167 ----
              { return nil_t(); }
          };
  
!     #if !defined(__BORLANDC__) && !defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
          struct dummy { void nonnull() {}; };
          typedef void (dummy::*safe_bool)();
      #else
          typedef bool safe_bool;
      #endif
  
!     #if !defined(__BORLANDC__) && !defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
      #define BOOST_SPIRIT_SAFE_BOOL(cond)  ((cond) ? &impl::dummy::nonnull : 0)
      #else
      #define BOOST_SPIRIT_SAFE_BOOL(cond)  (cond)
*** misc/spirit-1.6.1/boost/spirit/core/impl/parser.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/impl/parser.ipp	Wed Dec  5 10:08:58 2007
***************
*** 11,16 ****
--- 11,20 ----
  #if !defined(BOOST_SPIRIT_PARSER_IPP)
  #define BOOST_SPIRIT_PARSER_IPP
  
+ #if defined __SUNPRO_CC
+ #pragma disable_warn
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  namespace boost { namespace spirit {
  
***************
*** 51,56 ****
--- 55,64 ----
      }
  
  }} // namespace boost::spirit
+ 
+ #if defined __SUNPRO_CC
+ #pragma enable_warn
+ #endif
  
  #endif
  
*** misc/spirit-1.6.1/boost/spirit/core/match.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/match.hpp	Wed Dec  5 10:08:58 2007
***************
*** 60,70 ****
          : len(-1), val(impl::match_attr<T>::get_default()) {}
  
          explicit
!         match(unsigned length)
!         : len(length), val((impl::match_attr<T>::get_default())) {}
  
!         match(unsigned length, param_type val_)
!         : len(length), val(val_) {}
  
          operator impl::safe_bool() const
          { return BOOST_SPIRIT_SAFE_BOOL(len >= 0); }
--- 60,70 ----
          : len(-1), val(impl::match_attr<T>::get_default()) {}
  
          explicit
!         match(unsigned _length)
!         : len(_length), val((impl::match_attr<T>::get_default())) {}
  
!         match(unsigned _length, param_type val_)
!         : len(_length), val(val_) {}
  
          operator impl::safe_bool() const
          { return BOOST_SPIRIT_SAFE_BOOL(len >= 0); }
***************
*** 120,130 ****
          : len(-1) {}
  
          explicit
!         match(unsigned length)
!         : len(length) {}
  
!         match(unsigned length, nil_t)
!         : len(length) {}
  
          operator impl::safe_bool() const
          { return BOOST_SPIRIT_SAFE_BOOL(len >= 0); }
--- 120,130 ----
          : len(-1) {}
  
          explicit
!         match(unsigned _length)
!         : len(_length) {}
  
!         match(unsigned _length, nil_t)
!         : len(_length) {}
  
          operator impl::safe_bool() const
          { return BOOST_SPIRIT_SAFE_BOOL(len >= 0); }
*** misc/spirit-1.6.1/boost/spirit/core/meta/impl/fundamental.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/meta/impl/fundamental.ipp	Wed Dec  5 10:08:58 2007
***************
*** 11,16 ****
--- 11,20 ----
  #if !defined(BOOST_SPIRIT_FUNDAMENTAL_IPP)
  #define BOOST_SPIRIT_FUNDAMENTAL_IPP
  
+ #if defined __SUNPRO_CC
+ #pragma disable_warn
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  namespace boost { namespace spirit {
  
***************
*** 302,306 ****
--- 306,314 ----
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
+ 
+ #if defined __SUNPRO_CC
+ #pragma enable_warn
+ #endif
  
  #endif // !defined(BOOST_SPIRIT_FUNDAMENTAL_IPP)
*** misc/spirit-1.6.1/boost/spirit/core/non_terminal/impl/grammar.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/non_terminal/impl/grammar.ipp	Wed Dec  5 10:08:58 2007
***************
*** 243,249 ****
      //////////////////////////////////
      template<typename GrammarT>
      inline void
!     grammar_destruct(GrammarT* self)
      {
  #if !defined(BOOST_SPIRIT_SINGLE_GRAMMAR_INSTANCE)
          typedef impl::grammar_helper_base<GrammarT> helper_base_t;
--- 243,255 ----
      //////////////////////////////////
      template<typename GrammarT>
      inline void
!     grammar_destruct(GrammarT*
! #if !defined(BOOST_SPIRIT_SINGLE_GRAMMAR_INSTANCE)
! # if !defined(__GNUC__) || (__GNUC__ > 2)
! self
! #endif
! #endif
! 	)
      {
  #if !defined(BOOST_SPIRIT_SINGLE_GRAMMAR_INSTANCE)
          typedef impl::grammar_helper_base<GrammarT> helper_base_t;
*** misc/spirit-1.6.1/boost/spirit/core/non_terminal/subrule.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/non_terminal/subrule.hpp	Wed Dec  5 10:08:58 2007
***************
*** 228,234 ****
              subrule_list<
                  subrule_parser<ID2, DefT2, ContextT2>,
                  nil_t> >
!         operator,(subrule_parser<ID2, DefT2, ContextT2> const& rhs) const
          {
              return subrule_list<
                  self_t,
--- 228,234 ----
              subrule_list<
                  subrule_parser<ID2, DefT2, ContextT2>,
                  nil_t> >
!         operator,(subrule_parser<ID2, DefT2, ContextT2> const& _rhs) const
          {
              return subrule_list<
                  self_t,
***************
*** 238,244 ****
                          *this,
                          subrule_list<
                              subrule_parser<ID2, DefT2, ContextT2>, nil_t>(
!                                 rhs, nil_t()));
          }
  
          typename DefT::embed_t rhs;
--- 238,244 ----
                          *this,
                          subrule_list<
                              subrule_parser<ID2, DefT2, ContextT2>, nil_t>(
!                                 _rhs, nil_t()));
          }
  
          typename DefT::embed_t rhs;
***************
*** 276,285 ****
          parse_main(ScannerT const& scan) const
          {
              typedef typename parser_result<self_t, ScannerT>::type result_t;
!             result_t result;
              impl::parse_subrule<result_t, ScannerT, ID>::
!                 do_(result, scan);
!             return result;
          }
  
          template <typename ScannerT>
--- 276,285 ----
          parse_main(ScannerT const& scan) const
          {
              typedef typename parser_result<self_t, ScannerT>::type result_t;
!             result_t _result;
              impl::parse_subrule<result_t, ScannerT, ID>::
!                 do_(_result, scan);
!             return _result;
          }
  
          template <typename ScannerT>
*** misc/spirit-1.6.1/boost/spirit/core/scanner/impl/skipper.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/scanner/impl/skipper.ipp	Wed Dec  5 10:08:58 2007
***************
*** 11,16 ****
--- 11,20 ----
  #if !defined(BOOST_SPIRIT_SKIPPER_IPP)
  #define BOOST_SPIRIT_SKIPPER_IPP
  
+ #if defined __SUNPRO_CC
+ #pragma disable_warn
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  namespace boost { namespace spirit {
  
***************
*** 175,180 ****
--- 179,188 ----
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
+ 
+ #if defined __SUNPRO_CC
+ #pragma enable_warn
+ #endif
  
  #endif
  
*** misc/spirit-1.6.1/boost/spirit/core/scanner/scanner.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/core/scanner/scanner.hpp	Wed Dec  5 10:08:58 2007
***************
*** 18,23 ****
--- 18,26 ----
  #include <iterator>
  
  #include "boost/config.hpp"
+ #ifdef BOOST_NO_STD_ITERATOR_TRAITS
+ #include "boost/iterator_adaptors.hpp"
+ #endif
  #include "boost/spirit/core/match.hpp"
  #include "boost/spirit/core/non_terminal/parser_id.hpp"
  
***************
*** 236,245 ****
--- 239,255 ----
      typedef IteratorT iterator_t;
      typedef PoliciesT policies_t;
  
+ #ifdef BOOST_NO_STD_ITERATOR_TRAITS
+     typedef typename boost::detail::iterator_traits<IteratorT>::value_type
+         value_t;
+     typedef typename boost::detail::iterator_traits<IteratorT>::reference
+         ref_t;
+ #else
      typedef typename BOOST_SPIRIT_IT_NS::iterator_traits<IteratorT>::value_type
          value_t;
      typedef typename BOOST_SPIRIT_IT_NS::iterator_traits<IteratorT>::reference
          ref_t;
+ #endif
      typedef typename boost::call_traits<IteratorT>::param_type
          iter_param_t;
  
***************
*** 260,281 ****
      bool
      at_end() const
      {
!         typedef typename PoliciesT::iteration_policy_t iteration_policy_t;
!         return iteration_policy_t::at_end(*this);
      }
  
      value_t
      operator*() const
      {
!         typedef typename PoliciesT::iteration_policy_t iteration_policy_t;
!         return iteration_policy_t::filter(iteration_policy_t::get(*this));
      }
  
      scanner const&
      operator++() const
      {
!         typedef typename PoliciesT::iteration_policy_t iteration_policy_t;
!         iteration_policy_t::advance(*this);
          return *this;
      }
  
--- 270,291 ----
      bool
      at_end() const
      {
!         typedef typename PoliciesT::iteration_policy_t _iteration_policy_t;
!         return _iteration_policy_t::at_end(*this);
      }
  
      value_t
      operator*() const
      {
!         typedef typename PoliciesT::iteration_policy_t _iteration_policy_t;
!         return _iteration_policy_t::filter(_iteration_policy_t::get(*this));
      }
  
      scanner const&
      operator++() const
      {
!         typedef typename PoliciesT::iteration_policy_t _iteration_policy_t;
!         _iteration_policy_t::advance(*this);
          return *this;
      }
  
*** misc/spirit-1.6.1/boost/spirit/error_handling/exceptions.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/error_handling/exceptions.hpp	Wed Dec  5 10:08:58 2007
***************
*** 38,44 ****
  
          parser_error_base() {}
          virtual ~parser_error_base() throw() {}
!         parser_error_base(parser_error_base const&) {}
          parser_error_base& operator=(parser_error_base const&)
          { return *this; }
      };
--- 38,44 ----
  
          parser_error_base() {}
          virtual ~parser_error_base() throw() {}
!         parser_error_base(parser_error_base const&) : std::exception() {}
          parser_error_base& operator=(parser_error_base const&)
          { return *this; }
      };
***************
*** 104,111 ****
          typedef unary<ParserT, parser<self_t> >         base_t;
          typedef unary_parser_category                   parser_category_t;
  
!         assertive_parser(ParserT const& parser, ErrorDescrT descriptor)
!         : base_t(parser), descriptor(descriptor) {}
  
          template <typename ScannerT>
          struct result
--- 104,111 ----
          typedef unary<ParserT, parser<self_t> >         base_t;
          typedef unary_parser_category                   parser_category_t;
  
!         assertive_parser(ParserT const& parser, ErrorDescrT desc)
!         : base_t(parser), descriptor(desc) {}
  
          template <typename ScannerT>
          struct result
***************
*** 200,208 ****
  
          error_status(
              result_t result_ = fail,
!             int length = -1,
              T const& value_ = T())
!         : result(result_), length(length), value(value_) {}
  
          result_t    result;
          int         length;
--- 200,208 ----
  
          error_status(
              result_t result_ = fail,
!             int length_ = -1,
              T const& value_ = T())
!         : result(result_), length(length_), value(value_) {}
  
          result_t    result;
          int         length;
*** misc/spirit-1.6.1/boost/spirit/iterator/impl/file_iterator.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/iterator/impl/file_iterator.ipp	Wed Dec  5 10:08:58 2007
***************
*** 24,29 ****
--- 24,33 ----
  #if !defined FILE_ITERATOR_IPP
  #define      FILE_ITERATOR_IPP
  
+ #if defined __SUNPRO_CC
+ #pragma disable_warn
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  #include <cassert>
  #include <fcntl.h>
***************
*** 489,493 ****
--- 493,501 ----
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
+ 
+ #if defined __SUNPRO_CC
+ #pragma enable_warn
+ #endif
  
  #endif // #if !defined FILE_ITERATOR_IPP
*** misc/spirit-1.6.1/boost/spirit/iterator/multi_pass.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/iterator/multi_pass.hpp	Wed Dec  5 10:08:58 2007
***************
*** 11,16 ****
--- 11,21 ----
  #ifndef BOOST_SPIRIT_ITERATOR_MULTI_PASS_HPP
  #define BOOST_SPIRIT_ITERATOR_MULTI_PASS_HPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include <boost/config.hpp>
  #include <boost/throw_exception.hpp>
  #include <boost/detail/workaround.hpp>
***************
*** 1313,1317 ****
--- 1318,1327 ----
  
  #undef BOOST_SPIRIT_IT_NS
  #endif  // defined(BOOST_MSVC) && (BOOST_MSVC <= 1300)
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif  // BOOST_SPIRIT_ITERATOR_MULTI_PASS_HPP
  
*** misc/spirit-1.6.1/boost/spirit/utility/chset.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/utility/chset.hpp	Wed Dec  5 10:08:58 2007
***************
*** 12,17 ****
--- 12,22 ----
  #ifndef BOOST_SPIRIT_CHSET_HPP
  #define BOOST_SPIRIT_CHSET_HPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  #include <boost/shared_ptr.hpp>
  #include <boost/spirit/core/primitives/primitives.hpp>
***************
*** 229,234 ****
--- 234,243 ----
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif
  
*** misc/spirit-1.6.1/boost/spirit/utility/chset_operators.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/utility/chset_operators.hpp	Wed Dec  5 10:08:58 2007
***************
*** 12,17 ****
--- 12,22 ----
  #ifndef BOOST_SPIRIT_CHSET_OPERATORS_HPP
  #define BOOST_SPIRIT_CHSET_OPERATORS_HPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  #include <boost/spirit/utility/chset.hpp>
  
*** misc/spirit-1.6.1/boost/spirit/utility/confix.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/utility/confix.hpp	Wed Dec  5 10:08:58 2007
***************
*** 389,395 ****
              as_parser<OpenT>::convert(open),
              as_parser<CloseT>::convert(close)
          );
! };
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
--- 389,395 ----
              as_parser<OpenT>::convert(open),
              as_parser<CloseT>::convert(close)
          );
! }
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
*** misc/spirit-1.6.1/boost/spirit/utility/functor_parser.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/utility/functor_parser.hpp	Wed Dec  5 10:08:58 2007
***************
*** 54,66 ****
              typedef typename ScannerT::iterator_t   iterator_t;
  
              iterator_t const s(scan.first);
!             functor_result_t result;
!             int const len = functor(scan, result);
  
              if (len < 0)
                  return scan.no_match();
              else
!                 return scan.create_match(len, result, s, scan.first);
          }
      };
  
--- 54,66 ----
              typedef typename ScannerT::iterator_t   iterator_t;
  
              iterator_t const s(scan.first);
!             functor_result_t res;
!             int const len = functor(scan, res);
  
              if (len < 0)
                  return scan.no_match();
              else
!                 return scan.create_match(len, res, s, scan.first);
          }
      };
  
*** misc/spirit-1.6.1/boost/spirit/utility/impl/chset.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/utility/impl/chset.ipp	Wed Dec  5 10:08:58 2007
***************
*** 12,17 ****
--- 12,22 ----
  #ifndef BOOST_SPIRIT_CHSET_IPP
  #define BOOST_SPIRIT_CHSET_IPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  #include <boost/limits.hpp>
  #include <boost/spirit/utility/chset.hpp>
***************
*** 359,364 ****
--- 364,373 ----
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif
  
*** misc/spirit-1.6.1/boost/spirit/utility/impl/chset_operators.ipp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/utility/impl/chset_operators.ipp	Wed Dec  5 10:08:58 2007
***************
*** 11,16 ****
--- 11,21 ----
  #ifndef BOOST_SPIRIT_CHSET_OPERATORS_IPP
  #define BOOST_SPIRIT_CHSET_OPERATORS_IPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  ///////////////////////////////////////////////////////////////////////////////
  #include <boost/limits.hpp>
  
***************
*** 659,664 ****
--- 664,673 ----
  
  ///////////////////////////////////////////////////////////////////////////////
  }} // namespace boost::spirit
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif
  
*** misc/spirit-1.6.1/boost/spirit/utility/loops.hpp	Tue Jul  8 04:19:06 2003
--- misc/build/spirit-1.6.1/boost/spirit/utility/loops.hpp	Wed Dec  5 10:08:58 2007
***************
*** 47,54 ****
          typedef fixed_loop<ParserT, ExactT>     self_t;
          typedef unary<ParserT, parser<self_t> >  base_t;
  
!         fixed_loop (ParserT const & subject, ExactT const & exact)
!         : base_t(subject), m_exact(exact) {}
  
          template <typename ScannerT>
          typename parser_result <self_t, ScannerT>::type
--- 47,54 ----
          typedef fixed_loop<ParserT, ExactT>     self_t;
          typedef unary<ParserT, parser<self_t> >  base_t;
  
!         fixed_loop (ParserT const & subject_, ExactT const & exact_)
!         : base_t(subject_), m_exact(exact_) {}
  
          template <typename ScannerT>
          typename parser_result <self_t, ScannerT>::type
*** misc/spirit-1.6.1/miniboost/boost/concept_check.hpp	Tue Jul  8 04:19:09 2003
--- misc/build/spirit-1.6.1/miniboost/boost/concept_check.hpp	Wed Dec  5 10:08:58 2007
***************
*** 708,719 ****
        function_requires< AssignableConcept<Container> >();
        const_constraints(c);
      }
!     void const_constraints(const Container& c) {
!       i = c.begin();
!       i = c.end();
!       n = c.size();
!       n = c.max_size();
!       b = c.empty();
      }
      Container c;
      bool b;
--- 708,719 ----
        function_requires< AssignableConcept<Container> >();
        const_constraints(c);
      }
!     void const_constraints(const Container& cnr) {
!       i = cnr.begin();
!       i = cnr.end();
!       n = cnr.size();
!       n = cnr.max_size();
!       b = cnr.empty();
      }
      Container c;
      bool b;
***************
*** 777,785 ****
          BidirectionalIteratorConcept<const_reverse_iterator> >();
        const_constraints(c);
      }
!     void const_constraints(const ReversibleContainer& c) {
!       const_reverse_iterator i = c.rbegin();
!       i = c.rend();
      }
      ReversibleContainer c;
    };
--- 777,785 ----
          BidirectionalIteratorConcept<const_reverse_iterator> >();
        const_constraints(c);
      }
!     void const_constraints(const ReversibleContainer& cnr) {
!       const_reverse_iterator i = cnr.rbegin();
!       i = cnr.rend();
      }
      ReversibleContainer c;
    };
***************
*** 821,828 ****
  
        const_constraints(c);
      }
!     void const_constraints(const RandomAccessContainer& c) {
!       const_reference r = c[n];
        ignore_unused_variable_warning(r);
      }
      RandomAccessContainer c;
--- 821,828 ----
  
        const_constraints(c);
      }
!     void const_constraints(const RandomAccessContainer& cnr) {
!       const_reference r = cnr[n];
        ignore_unused_variable_warning(r);
      }
      RandomAccessContainer c;
***************
*** 925,932 ****
        reference r = c.back();
        ignore_unused_variable_warning(r);
      }
!     void const_constraints(const BackInsertionSequence& c) {
!       const_reference r = c.back();
        ignore_unused_variable_warning(r);
      };
      BackInsertionSequence c;
--- 925,932 ----
        reference r = c.back();
        ignore_unused_variable_warning(r);
      }
!     void const_constraints(const BackInsertionSequence& cnr) {
!       const_reference r = cnr.back();
        ignore_unused_variable_warning(r);
      };
      BackInsertionSequence c;
***************
*** 947,956 ****
        c.erase(r.first, r.second);
        const_constraints(c);
      }
!     void const_constraints(const AssociativeContainer& c) {
!       ci = c.find(k);
!       n = c.count(k);
!       cr = c.equal_range(k);
      }
      typedef typename AssociativeContainer::iterator iterator;
      typedef typename AssociativeContainer::const_iterator const_iterator;
--- 947,956 ----
        c.erase(r.first, r.second);
        const_constraints(c);
      }
!     void const_constraints(const AssociativeContainer& cnr) {
!       ci = cnr.find(k);
!       n = cnr.count(k);
!       cr = cnr.equal_range(k);
      }
      typedef typename AssociativeContainer::iterator iterator;
      typedef typename AssociativeContainer::const_iterator const_iterator;
*** misc/spirit-1.6.1/miniboost/boost/config/compiler/gcc.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/config/compiler/gcc.hpp	Wed Dec  5 10:08:58 2007
***************
*** 59,65 ****
  #endif
  //
  // last known and checked version is 3.2:
! #if (__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ > 2))
  #  if defined(BOOST_ASSERT_CONFIG)
  #     error "Unknown compiler version - please run the configure tests and report the results"
  #  else
--- 59,66 ----
  #endif
  //
  // last known and checked version is 3.2:
! // although 3.4+x & 4.x are unchecked, we will give it a try
! #if (__GNUC__ > 4)
  #  if defined(BOOST_ASSERT_CONFIG)
  #     error "Unknown compiler version - please run the configure tests and report the results"
  #  else
*** misc/spirit-1.6.1/miniboost/boost/config/compiler/sunpro_cc.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/config/compiler/sunpro_cc.hpp	Wed Dec  5 10:08:58 2007
***************
*** 45,52 ****
  #      define BOOST_NO_INTEGRAL_INT64_T
  #    endif
  
! #    if (__SUNPRO_CC <= 0x540) || !defined(BOOST_STRICT_CONFIG)
  #      define BOOST_NO_TEMPLATE_TEMPLATES
  #    endif
  
  #define BOOST_COMPILER "Sun compiler version " BOOST_STRINGIZE(__SUNPRO_CC)
--- 45,57 ----
  #      define BOOST_NO_INTEGRAL_INT64_T
  #    endif
  
! #    if (__SUNPRO_CC <= 0x550) || !defined(BOOST_STRICT_CONFIG)
  #      define BOOST_NO_TEMPLATE_TEMPLATES
+        // see http://lists.boost.org/MailArchives/boost/msg47184.php
+        // and http://lists.boost.org/MailArchives/boost/msg47220.php
+ #      define BOOST_NO_INCLASS_MEMBER_INITIALIZATION
+ #      define BOOST_NO_SFINAE
+ #      define BOOST_NO_ARRAY_TYPE_SPECIALIZATIONS
  #    endif
  
  #define BOOST_COMPILER "Sun compiler version " BOOST_STRINGIZE(__SUNPRO_CC)
*** misc/spirit-1.6.1/miniboost/boost/config/compiler/visualc.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/config/compiler/visualc.hpp	Wed Dec  5 10:12:34 2007
***************
*** 65,75 ****
  #  define BOOST_NO_INTRINSIC_WCHAR_T
  #endif
  
! //   
! // check for exception handling support:   
! #ifndef _CPPUNWIND   
! #  define BOOST_NO_EXCEPTIONS   
! #endif 
  
  //
  // __int64 support:
--- 65,75 ----
  #  define BOOST_NO_INTRINSIC_WCHAR_T
  #endif
  
! //
! // check for exception handling support:
! #ifndef _CPPUNWIND
! #  define BOOST_NO_EXCEPTIONS
! #endif
  
  //
  // __int64 support:
***************
*** 94,99 ****
--- 94,101 ----
  #   define BOOST_COMPILER_VERSION 7.0
  # elif _MSC_VER == 1310
  #   define BOOST_COMPILER_VERSION 7.1
+ # elif _MSC_VER == 1400
+ #   define BOOST_COMPILER_VERSION 8.0
  # else
  #   define BOOST_COMPILER_VERSION _MSC_VER
  # endif
***************
*** 108,121 ****
  #endif
  //
  // last known and checked version is 1310:
! #if (_MSC_VER > 1310)
  #  if defined(BOOST_ASSERT_CONFIG)
  #     error "Unknown compiler version - please run the configure tests and report the results"
  #  else
  #     pragma message("Unknown compiler version - please run the configure tests and report the results")
  #  endif
  #endif
- 
  
  
  
--- 110,122 ----
  #endif
  //
  // last known and checked version is 1310:
! #if (_MSC_VER > 1500)
  #  if defined(BOOST_ASSERT_CONFIG)
  #     error "Unknown compiler version - please run the configure tests and report the results"
  #  else
  #     pragma message("Unknown compiler version - please run the configure tests and report the results")
  #  endif
  #endif
  
  
  
*** misc/spirit-1.6.1/miniboost/boost/config/platform/macos.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/config/platform/macos.hpp	Wed Dec  5 10:08:58 2007
***************
*** 19,27 ****
  #    define BOOST_HAS_UNISTD_H
  #  endif
  // boilerplate code:
! #  ifndef TARGET_CARBON
  #     include <boost/config/posix_features.hpp>
! #  endif
  #  ifndef BOOST_HAS_STDINT_H
  #     define BOOST_HAS_STDINT_H
  #  endif
--- 19,28 ----
  #    define BOOST_HAS_UNISTD_H
  #  endif
  // boilerplate code:
! // See issue #i72248# 
! //#  ifndef TARGET_CARBON
  #     include <boost/config/posix_features.hpp>
! //#  endif
  #  ifndef BOOST_HAS_STDINT_H
  #     define BOOST_HAS_STDINT_H
  #  endif
*** misc/spirit-1.6.1/miniboost/boost/config/platform/win32.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/config/platform/win32.hpp	Wed Dec  5 10:08:58 2007
***************
*** 40,45 ****
--- 40,46 ----
  #  define NOMINMAX
  #endif
  
+ #if (_MSC_VER < 1400)
  #ifdef BOOST_MSVC
  namespace std{
    // Apparently, something in the Microsoft libraries requires the "long"
***************
*** 65,67 ****
--- 66,69 ----
  using std::min;
  using std::max;
  #     endif
+ #endif
*** misc/spirit-1.6.1/miniboost/boost/config/user.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/config/user.hpp	Wed Dec  5 10:08:58 2007
***************
*** 66,68 ****
--- 66,74 ----
  // #define BOOST_DISABLE_WIN32
  
  
+ // Switch off exception statements if file is compiled without
+ // exception support:
+ #if defined(EXCEPTIONS_OFF) && !defined(BOOST_NO_EXCEPTIONS)
+ #define BOOST_NO_EXCEPTIONS
+ #endif
+ 
*** misc/spirit-1.6.1/miniboost/boost/iterator_adaptors.hpp	Tue Jul  8 04:19:09 2003
--- misc/build/spirit-1.6.1/miniboost/boost/iterator_adaptors.hpp	Wed Dec  5 10:08:58 2007
***************
*** 119,124 ****
--- 119,129 ----
  #ifndef BOOST_ITERATOR_ADAPTOR_DWA053000_HPP_
  # define BOOST_ITERATOR_ADAPTOR_DWA053000_HPP_
  
+ # if defined _MSC_VER
+ # pragma warning(push)
+ # pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ # endif
+ 
  # include <boost/iterator.hpp>
  # include <boost/utility.hpp>
  # include <boost/compressed_pair.hpp>
***************
*** 873,879 ****
           return policies().dereference(*this);
      }
  
! #if BOOST_WORKAROUND(BOOST_MSVC, > 0)
  # pragma warning(push)
  # pragma warning( disable : 4284 )
  #endif
--- 878,884 ----
           return policies().dereference(*this);
      }
  
! #if BOOST_WORKAROUND(BOOST_MSVC, < 1300)
  # pragma warning(push)
  # pragma warning( disable : 4284 )
  #endif
***************
*** 882,888 ****
      operator->() const
          { return detail::operator_arrow(*this, iterator_category()); }
  
! #if BOOST_WORKAROUND(BOOST_MSVC, > 0)
  # pragma warning(pop)
  #endif
  
--- 887,893 ----
      operator->() const
          { return detail::operator_arrow(*this, iterator_category()); }
  
! #if BOOST_WORKAROUND(BOOST_MSVC, < 1300)
  # pragma warning(pop)
  #endif
  
***************
*** 1430,1435 ****
--- 1435,1443 ----
  } // namespace boost
  # undef BOOST_ARG_DEPENDENT_TYPENAME
  
+ # if defined _MSC_VER
+ # pragma warning(pop)
+ # endif
  
  #endif
  
*** misc/spirit-1.6.1/miniboost/boost/mpl/aux_/ice_cast.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/aux_/ice_cast.hpp	Wed Dec  5 10:08:58 2007
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_MPL_AUX_ICE_CAST_HPP_INCLUDED
  #define BOOST_MPL_AUX_ICE_CAST_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/config/workaround.hpp"
  
  #if BOOST_WORKAROUND(__BORLANDC__, BOOST_TESTED_AT(0x561)) \
***************
*** 26,31 ****
--- 31,40 ----
  #   define BOOST_MPL_AUX_ICE_CAST(T, expr) (T)(expr)
  #else
  #   define BOOST_MPL_AUX_ICE_CAST(T, expr) static_cast<T>(expr)
+ #endif
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
  #endif
  
  #endif // BOOST_MPL_AUX_ICE_CAST_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/mpl/aux_/integral_wrapper.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/aux_/integral_wrapper.hpp	Wed Dec  5 10:08:58 2007
***************
*** 17,22 ****
--- 17,27 ----
  
  // no include guards, the header is intended for multiple inclusion!
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/ice_cast.hpp"
  #include "boost/mpl/aux_/config/nttp.hpp"
  #include "boost/mpl/aux_/config/static_constant.hpp"
***************
*** 84,86 ****
--- 89,95 ----
  #undef AUX_WRAPPER_PARAMS
  #undef AUX_WRAPPER_INST
  #undef AUX_WRAPPER_VALUE_TYPE
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
*** misc/spirit-1.6.1/miniboost/boost/mpl/aux_/lambda_support.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/aux_/lambda_support.hpp	Wed Dec  5 10:08:58 2007
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_MPL_AUX_LAMBDA_SUPPORT_HPP_INCLUDED
  #define BOOST_MPL_AUX_LAMBDA_SUPPORT_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/config/lambda.hpp"
  
  #if !defined(BOOST_MPL_NO_FULL_LAMBDA_SUPPORT)
***************
*** 132,136 ****
--- 137,145 ----
  #endif // __EDG_VERSION__
  
  #endif // BOOST_MPL_NO_FULL_LAMBDA_SUPPORT
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif // BOOST_MPL_AUX_LAMBDA_SUPPORT_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/mpl/aux_/logical_op.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/aux_/logical_op.hpp	Wed Dec  5 10:08:58 2007
***************
*** 17,22 ****
--- 17,27 ----
  
  // no include guards, the header is intended for multiple inclusion!
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #if !defined(BOOST_MPL_PREPROCESSING_MODE)
  #   include "boost/mpl/bool.hpp"
  #   include "boost/mpl/aux_/nested_type_wknd.hpp"
***************
*** 167,169 ****
--- 172,178 ----
  #undef AUX_LOGICAL_OP_NAME
  #undef AUX_LOGICAL_OP_VALUE1
  #undef AUX_LOGICAL_OP_VALUE2
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
*** misc/spirit-1.6.1/miniboost/boost/mpl/if.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/if.hpp	Wed Dec  5 10:08:58 2007
***************
*** 17,22 ****
--- 17,27 ----
  //
  // See http://www.boost.org/libs/mpl for documentation.
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/value_wknd.hpp"
  #include "boost/mpl/aux_/ice_cast.hpp"
  #include "boost/mpl/aux_/void_spec.hpp"
***************
*** 173,177 ****
--- 178,186 ----
  
  } // namespace mpl
  } // namespace boost
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif // BOOST_MPL_IF_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/mpl/integral_c.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/integral_c.hpp	Wed Dec  5 10:08:58 2007
***************
*** 18,23 ****
--- 18,28 ----
  //
  // See http://www.boost.org/libs/mpl for documentation.
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/integral_c_fwd.hpp"
  #include "boost/mpl/aux_/ice_cast.hpp"
  #include "boost/mpl/aux_/config/ctps.hpp"
***************
*** 48,53 ****
--- 53,62 ----
      operator bool() const { return this->value; }
  };
  }}
+ #endif
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
  #endif
  
  #endif // BOOST_MPL_INTEGRAL_C_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/mpl/integral_c_fwd.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/integral_c_fwd.hpp	Wed Dec  5 10:08:58 2007
***************
*** 18,23 ****
--- 18,28 ----
  //
  // See http://www.boost.org/libs/mpl for documentation.
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/config/workaround.hpp"
  
  namespace boost { namespace mpl {
***************
*** 28,32 ****
--- 33,41 ----
  template< typename T, T N > struct integral_c;
  #endif
  }}
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif // BOOST_MPL_INTEGRAL_C_FWD_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/mpl/is_sequence.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/is_sequence.hpp	Wed Dec  5 10:08:58 2007
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_MPL_IS_SEQUENCE_HPP_INCLUDED
  #define BOOST_MPL_IS_SEQUENCE_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/not.hpp"
  #include "boost/mpl/or.hpp"
  #include "boost/mpl/begin_end.hpp"
***************
*** 97,101 ****
--- 102,110 ----
  BOOST_MPL_AUX_VOID_SPEC(1, is_sequence)
  
  }} // namespace boost::mpl
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif // BOOST_MPL_IS_SEQUENCE_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/mpl/sequence_tag.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/mpl/sequence_tag.hpp	Wed Dec  5 10:08:58 2007
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_MPL_SEQUENCE_TAG_HPP_INCLUDED
  #define BOOST_MPL_SEQUENCE_TAG_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/sequence_tag_fwd.hpp"
  #include "boost/mpl/aux_/has_tag.hpp"
  #include "boost/mpl/aux_/has_begin.hpp"
***************
*** 129,133 ****
--- 134,142 ----
  BOOST_MPL_AUX_VOID_SPEC(1, sequence_tag)
  
  }} // namespace boost::mpl
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif // BOOST_MPL_SEQUENCE_TAG_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/optional.hpp	Tue Jul  8 04:19:09 2003
--- misc/build/spirit-1.6.1/miniboost/boost/optional.hpp	Wed Dec  5 10:08:58 2007
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_OPTIONAL_FLC_19NOV2002_HPP
  #define BOOST_OPTIONAL_FLC_19NOV2002_HPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include<new>
  #include<algorithm>
  
***************
*** 194,200 ****
--- 199,209 ----
  
      // implicit conversion to "bool"
      // No-throw
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return m_initialized; }
+ #else
      operator unspecified_bool_type() const { return m_initialized ? &this_type::destroy : 0 ; }
+ #endif // defined(__SUNPRO_CC)
  
         // This is provided for those compilers which don't like the conversion to bool
         // on some contexts.
***************
*** 312,317 ****
--- 321,330 ----
  
  
  } // namespace boost
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif
  
*** misc/spirit-1.6.1/miniboost/boost/scoped_array.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/scoped_array.hpp	Wed Dec  5 10:08:58 2007
***************
*** 83,94 ****
--- 83,98 ----
  
      // implicit conversion to "bool"
  
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return ptr != 0; }
+ #else
      typedef T * (this_type::*unspecified_bool_type)() const;
  
      operator unspecified_bool_type() const // never throws
      {
          return ptr == 0? 0: &this_type::get;
      }
+ #endif // defined(__SUNPRO_CC)
  
      bool operator! () const // never throws
      {
*** misc/spirit-1.6.1/miniboost/boost/scoped_ptr.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/scoped_ptr.hpp	Wed Dec  5 10:08:58 2007
***************
*** 102,113 ****
--- 102,117 ----
  
      // implicit conversion to "bool"
  
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return ptr != 0; }
+ #else
      typedef T * (this_type::*unspecified_bool_type)() const;
  
      operator unspecified_bool_type() const // never throws
      {
          return ptr == 0? 0: &this_type::get;
      }
+ #endif // defined(__SUNPRO_CC)
  
      bool operator! () const // never throws
      {
*** misc/spirit-1.6.1/miniboost/boost/shared_array.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/shared_array.hpp	Wed Dec  5 10:08:58 2007
***************
*** 94,105 ****
--- 94,109 ----
  
      // implicit conversion to "bool"
  
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return px != 0; }
+ #else
      typedef T * (this_type::*unspecified_bool_type)() const;
  
      operator unspecified_bool_type() const // never throws
      {
          return px == 0? 0: &this_type::get;
      }
+ #endif // defined(__SUNPRO_CC)
  
      bool operator! () const // never throws
      {
*** misc/spirit-1.6.1/miniboost/boost/shared_ptr.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/shared_ptr.hpp	Wed Dec  5 10:08:58 2007
***************
*** 35,41 ****
  
  #ifdef BOOST_MSVC  // moved here to work around VC++ compiler crash
  # pragma warning(push)
! # pragma warning(disable:4284) // odd return type for operator->
  #endif
  
  namespace boost
--- 35,41 ----
  
  #ifdef BOOST_MSVC  // moved here to work around VC++ compiler crash
  # pragma warning(push)
! # pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
  #endif
  
  namespace boost
***************
*** 246,257 ****
--- 246,261 ----
  
      // implicit conversion to "bool"
  
+ #if defined(__SUNPRO_CC) // workaround opt bug when compiling with -xO3
+     operator bool() const { return px != 0; }
+ #else
      typedef T * (this_type::*unspecified_bool_type)() const;
  
      operator unspecified_bool_type() const // never throws
      {
          return px == 0? 0: &this_type::get;
      }
+ #endif // defined(__SUNPRO_CC)
  
      // operator! is redundant, but some compilers need it
  
*** misc/spirit-1.6.1/miniboost/boost/throw_exception.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/throw_exception.hpp	Wed Dec  5 10:08:58 2007
***************
*** 29,35 ****
  
  #ifdef BOOST_NO_EXCEPTIONS
  
! void throw_exception(std::exception const & e); // user defined
  
  #else
  
--- 29,36 ----
  
  #ifdef BOOST_NO_EXCEPTIONS
  
! // void throw_exception(std::exception const & e); // user defined
! inline void throw_exception(std::exception const &) {}
  
  #else
  
*** misc/spirit-1.6.1/miniboost/boost/type_traits/add_reference.hpp	Tue Jul  8 04:19:09 2003
--- misc/build/spirit-1.6.1/miniboost/boost/type_traits/add_reference.hpp	Wed Dec  5 10:08:58 2007
***************
*** 10,15 ****
--- 10,20 ----
  #ifndef BOOST_TT_ADD_REFERENCE_HPP_INCLUDED
  #define BOOST_TT_ADD_REFERENCE_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/type_traits/is_reference.hpp"
  #include "boost/detail/workaround.hpp"
  #include "boost/config.hpp"
***************
*** 86,90 ****
--- 91,99 ----
  } // namespace boost
  
  #include "boost/type_traits/detail/type_trait_undef.hpp"
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif // BOOST_TT_ADD_REFERENCE_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/type_traits/is_base_and_derived.hpp	Tue Jul  8 04:19:09 2003
--- misc/build/spirit-1.6.1/miniboost/boost/type_traits/is_base_and_derived.hpp	Wed Dec  5 10:08:58 2007
***************
*** 10,15 ****
--- 10,20 ----
  #ifndef BOOST_TT_IS_BASE_AND_DERIVED_HPP_INCLUDED
  #define BOOST_TT_IS_BASE_AND_DERIVED_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/type_traits/is_class.hpp"
  #include "boost/type_traits/is_same.hpp"
  #include "boost/type_traits/is_convertible.hpp"
***************
*** 203,207 ****
--- 208,216 ----
  } // namespace boost
  
  #include "boost/type_traits/detail/bool_trait_undef.hpp"
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif // BOOST_TT_IS_BASE_AND_DERIVED_HPP_INCLUDED
*** misc/spirit-1.6.1/miniboost/boost/type_traits/is_polymorphic.hpp	Tue Jul  8 04:19:09 2003
--- misc/build/spirit-1.6.1/miniboost/boost/type_traits/is_polymorphic.hpp	Wed Dec  5 10:08:58 2007
***************
*** 6,11 ****
--- 6,16 ----
  #ifndef BOOST_TT_IS_POLYMORPHIC_HPP
  #define BOOST_TT_IS_POLYMORPHIC_HPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include <boost/type_traits/is_class.hpp>
  #include <boost/type_traits/remove_cv.hpp>
  // should be the last #include
***************
*** 86,90 ****
--- 91,99 ----
  } // namespace boost
  
  #include "boost/type_traits/detail/bool_trait_undef.hpp"
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif
*** misc/spirit-1.6.1/miniboost/boost/type_traits/type_with_alignment.hpp	Tue Jul  8 04:19:09 2003
--- misc/build/spirit-1.6.1/miniboost/boost/type_traits/type_with_alignment.hpp	Wed Dec  5 10:08:58 2007
***************
*** 72,78 ****
  #undef BOOST_TT_CHOOSE_MIN_ALIGNMENT
  #undef BOOST_TT_CHOOSE_T
  
! template<int TAlign, int Align>
  struct is_aligned
  {
      BOOST_STATIC_CONSTANT(bool,
--- 72,78 ----
  #undef BOOST_TT_CHOOSE_MIN_ALIGNMENT
  #undef BOOST_TT_CHOOSE_T
  
! template<std::size_t TAlign, std::size_t Align>
  struct is_aligned
  {
      BOOST_STATIC_CONSTANT(bool,
***************
*** 93,99 ****
  
  // This alignment method originally due to Brian Parker, implemented by David
  // Abrahams, and then ported here by Doug Gregor. 
! template <int Align>
  class type_with_alignment
  {
      typedef detail::lower_alignment<Align> t1;
--- 93,99 ----
  
  // This alignment method originally due to Brian Parker, implemented by David
  // Abrahams, and then ported here by Doug Gregor. 
! template <std::size_t Align>
  class type_with_alignment
  {
      typedef detail::lower_alignment<Align> t1;
*** misc/spirit-1.6.1/miniboost/boost/utility/addressof.hpp	Tue Jul  8 04:19:09 2003
--- misc/build/spirit-1.6.1/miniboost/boost/utility/addressof.hpp	Wed Dec  5 10:08:58 2007
***************
*** 16,21 ****
--- 16,26 ----
  #ifndef BOOST_UTILITY_ADDRESSOF_HPP
  # define BOOST_UTILITY_ADDRESSOF_HPP
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  # include <boost/config.hpp>
  # include <boost/detail/workaround.hpp>
  # if BOOST_WORKAROUND(BOOST_MSVC, == 1300)
***************
*** 39,43 ****
--- 44,52 ----
  }
  
  }
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
  
  #endif // BOOST_UTILITY_ADDRESSOF_HPP
*** misc/spirit-1.6.1/miniboost/boost/weak_ptr.hpp	Tue Jul  8 04:19:08 2003
--- misc/build/spirit-1.6.1/miniboost/boost/weak_ptr.hpp	Wed Dec  5 10:08:58 2007
***************
*** 16,26 ****
  
  #include <boost/shared_ptr.hpp>
  
- #ifdef BOOST_MSVC  // moved here to work around VC++ compiler crash
- # pragma warning(push)
- # pragma warning(disable:4284) // odd return type for operator->
- #endif
- 
  namespace boost
  {
  
--- 16,21 ----
***************
*** 185,193 ****
  }
  
  } // namespace boost
- 
- #ifdef BOOST_MSVC
- # pragma warning(pop)
- #endif    
  
  #endif  // #ifndef BOOST_WEAK_PTR_HPP_INCLUDED
--- 180,184 ----
