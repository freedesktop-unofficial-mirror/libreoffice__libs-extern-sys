*** misc/boost-1.30.2/boost/config/platform/macos.hpp  Thu Feb 13 13:28:05 2003
--- misc/build/boost-1.30.2/boost/config/platform/macos.hpp    Mon Jun  4 10:01:49 2007
***************
*** 19,27 ****
  #    define BOOST_HAS_UNISTD_H
  #  endif
  // boilerplate code:
! #  ifndef TARGET_CARBON
  #     include <boost/config/posix_features.hpp>
! #  endif
  #  ifndef BOOST_HAS_STDINT_H
  #     define BOOST_HAS_STDINT_H
  #  endif
--- 19,28 ----
  #    define BOOST_HAS_UNISTD_H
  #  endif
  // boilerplate code:
! // HDU: disabled the TARGET_CARBON check because of issue #i72248#
! //#  ifndef TARGET_CARBON
  #     include <boost/config/posix_features.hpp>
! //#  endif
  #  ifndef BOOST_HAS_STDINT_H
  #     define BOOST_HAS_STDINT_H
  #  endif
*** misc/boost-1.30.2/boost/bind.hpp	Tue Oct 15 12:51:34 2002
--- misc/build/boost-1.30.2/boost/bind.hpp	Tue Jul 25 14:47:06 2006
***************
*** 5,10 ****
--- 5,17 ----
  #pragma once
  #endif
  
+ #if defined(_MSC_VER) && !defined(BOOST_MEM_FN_ENABLE_CDECL)
+ // enable support for __cdecl (SAL_CALL) C++-UNO interface methods;
+ // makes sense to shift this to command line some day:
+ // -DBOOST_MEM_FN_ENABLE_CDECL
+ #define BOOST_MEM_FN_ENABLE_CDECL
+ #endif
+ 
  //
  //  bind.hpp - binds function objects to arguments
  //
***************
*** 1472,1477 ****
--- 1479,1496 ----
  #undef BOOST_BIND_MF_NAME
  #undef BOOST_BIND_MF_CC
  
+ #ifdef BOOST_MEM_FN_ENABLE_CDECL
+ 
+ #define BOOST_BIND_MF_NAME(X) X##_cdecl
+ #define BOOST_BIND_MF_CC __cdecl
+ 
+ #include <boost/bind/bind_mf_cc.hpp>
+ 
+ #undef BOOST_BIND_MF_NAME
+ #undef BOOST_BIND_MF_CC
+ 
+ #endif
+ 
  #ifdef BOOST_MEM_FN_ENABLE_STDCALL
  
  #define BOOST_BIND_MF_NAME(X) X##_stdcall
*** misc/boost-1.30.2/boost/config/compiler/gcc.hpp	2003-08-02 18:20:49.000000000 +0200
--- misc/build/boost-1.30.2/boost/config/compiler/gcc.hpp	2006-11-07 11:28:26.000000000 +0100
***************
*** 73,80 ****
  #  error "Compiler not configured - please reconfigure"
  #endif
  //
! // last known and checked version is 3.3:
! #if (__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ > 3))
  #  if defined(BOOST_ASSERT_CONFIG)
  #     error "Unknown compiler version - please run the configure tests and report the results"
  #  else
--- 73,80 ----
  #  error "Compiler not configured - please reconfigure"
  #endif
  //
! // last known and checked version is 4.2:
! #if (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 2))
  #  if defined(BOOST_ASSERT_CONFIG)
  #     error "Unknown compiler version - please run the configure tests and report the results"
  #  else
*** misc/boost-1.30.2/boost/function/function_template.hpp	Fri Feb  7 15:03:36 2003
--- misc/build/boost-1.30.2/boost/function/function_template.hpp	Wed Mar  8 20:10:22 2006
***************
*** 15,20 ****
--- 15,23 ----
  
  // Note: this header is a header template and must NOT have multiple-inclusion
  // protection.
+ #if defined __GNUC__
+ #pragma GCC system_header
+ #endif
  #include <boost/function/detail/prologue.hpp>
  
  #define BOOST_FUNCTION_TEMPLATE_PARMS BOOST_PP_ENUM_PARAMS(BOOST_FUNCTION_NUM_ARGS, typename T)
***************
*** 395,401 ****
        invoker = 0;
      }
  
! #if (defined __SUNPRO_CC) && (__SUNPRO_CC <= 0x530) && !(defined BOOST_NO_COMPILER_CONFIG)
      // Sun C++ 5.3 can't handle the safe_bool idiom, so don't use it
      operator bool () const { return !this->empty(); }
  #else
--- 398,404 ----
        invoker = 0;
      }
  
! #if (defined __SUNPRO_CC) // workaround opt bug when compiling with -xO3
      // Sun C++ 5.3 can't handle the safe_bool idiom, so don't use it
      operator bool () const { return !this->empty(); }
  #else
***************
*** 443,451 ****
                             R BOOST_FUNCTION_COMMA
                             BOOST_FUNCTION_TEMPLATE_ARGS
                           >::type
!           invoker_type;
  
!         invoker = &invoker_type::invoke;
          function_base::manager =
            &detail::function::functor_manager<FunctionPtr, Allocator>::manage;
          function_base::functor =
--- 446,454 ----
                             R BOOST_FUNCTION_COMMA
                             BOOST_FUNCTION_TEMPLATE_ARGS
                           >::type
!           lcl_invoker_type;
  
!         invoker = &lcl_invoker_type::invoke;
          function_base::manager =
            &detail::function::functor_manager<FunctionPtr, Allocator>::manage;
          function_base::functor =
***************
*** 476,491 ****
                                         R BOOST_FUNCTION_COMMA
                                         BOOST_FUNCTION_TEMPLATE_ARGS
                                       >::type
!           invoker_type;
  
!         invoker = &invoker_type::invoke;
          function_base::manager = &detail::function::functor_manager<
                                      FunctionObj, Allocator>::manage;
  #ifndef BOOST_NO_STD_ALLOCATOR
          typedef typename Allocator::template rebind<FunctionObj>::other
!           allocator_type;
!         typedef typename allocator_type::pointer pointer_type;
!         allocator_type allocator;
          pointer_type copy = allocator.allocate(1);
          allocator.construct(copy, f);
  
--- 479,494 ----
                                         R BOOST_FUNCTION_COMMA
                                         BOOST_FUNCTION_TEMPLATE_ARGS
                                       >::type
!           lcl_invoker_type;
  
!         invoker = &lcl_invoker_type::invoke;
          function_base::manager = &detail::function::functor_manager<
                                      FunctionObj, Allocator>::manage;
  #ifndef BOOST_NO_STD_ALLOCATOR
          typedef typename Allocator::template rebind<FunctionObj>::other
!           lcl_allocator_type;
!         typedef typename lcl_allocator_type::pointer pointer_type;
!         lcl_allocator_type allocator;
          pointer_type copy = allocator.allocate(1);
          allocator.construct(copy, f);
  
***************
*** 510,518 ****
                                         R BOOST_FUNCTION_COMMA
                                         BOOST_FUNCTION_TEMPLATE_ARGS
                                       >::type
!           invoker_type;
  
!         invoker = &invoker_type::invoke;
          function_base::manager = &detail::function::trivial_manager;
          function_base::functor =
            function_base::manager(
--- 513,521 ----
                                         R BOOST_FUNCTION_COMMA
                                         BOOST_FUNCTION_TEMPLATE_ARGS
                                       >::type
!           lcl_invoker_type;
  
!         invoker = &lcl_invoker_type::invoke;
          function_base::manager = &detail::function::trivial_manager;
          function_base::functor =
            function_base::manager(
***************
*** 532,539 ****
                         R BOOST_FUNCTION_COMMA
                         BOOST_FUNCTION_TEMPLATE_ARGS
                       >::type
!           invoker_type;
!       invoker = &invoker_type::invoke;
        function_base::manager = &detail::function::trivial_manager;
        function_base::functor = detail::function::make_any_pointer(this);
      }
--- 535,542 ----
                         R BOOST_FUNCTION_COMMA
                         BOOST_FUNCTION_TEMPLATE_ARGS
                       >::type
!           lcl_invoker_type;
!       invoker = &lcl_invoker_type::invoke;
        function_base::manager = &detail::function::trivial_manager;
        function_base::functor = detail::function::make_any_pointer(this);
      }
*** misc/boost-1.30.2/boost/function.hpp	Fri Feb 14 16:34:39 2003
--- misc/build/boost-1.30.2/boost/function.hpp	Tue Jul 25 14:47:06 2006
***************
*** 16,21 ****
--- 16,26 ----
  // William Kempf, Jesse Jones and Karl Nelson were all very helpful in the
  // design of this library.
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include <boost/preprocessor/iterate.hpp>
  #include <boost/detail/workaround.hpp>
  
***************
*** 67,70 ****
--- 72,79 ----
  #  define BOOST_PP_ITERATION_PARAMS_1 (3,(0,BOOST_FUNCTION_MAX_ARGS,<boost/function/detail/function_iterate.hpp>))
  #  include BOOST_PP_ITERATE()
  #  undef BOOST_PP_ITERATION_PARAMS_1
+ #endif
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
  #endif
*** misc/boost-1.30.2/boost/mem_fn.hpp	Fri Dec 20 19:14:59 2002
--- misc/build/boost-1.30.2/boost/mem_fn.hpp	Tue Jul 25 14:47:06 2006
***************
*** 5,10 ****
--- 5,17 ----
  #pragma once
  #endif
  
+ #if defined(_MSC_VER) && !defined(BOOST_MEM_FN_ENABLE_CDECL)
+ // enable support for __cdecl (SAL_CALL) C++-UNO interface methods;
+ // makes sense to shift this to command line some day:
+ // -DBOOST_MEM_FN_ENABLE_CDECL
+ #define BOOST_MEM_FN_ENABLE_CDECL
+ #endif
+ 
  //
  //  mem_fn.hpp - a generalization of std::mem_fun[_ref]
  //
***************
*** 46,51 ****
--- 53,70 ----
  #undef BOOST_MEM_FN_CC
  #undef BOOST_MEM_FN_NAME
  
+ #ifdef BOOST_MEM_FN_ENABLE_CDECL
+ 
+ #define BOOST_MEM_FN_NAME(X) inner_##X##_cdecl
+ #define BOOST_MEM_FN_CC __cdecl
+ 
+ #include <boost/bind/mem_fn_template.hpp>
+ 
+ #undef BOOST_MEM_FN_CC
+ #undef BOOST_MEM_FN_NAME
+ 
+ #endif
+ 
  #ifdef BOOST_MEM_FN_ENABLE_STDCALL
  
  #define BOOST_MEM_FN_NAME(X) inner_##X##_stdcall
***************
*** 87,92 ****
--- 106,123 ----
  #undef BOOST_MEM_FN_CC
  #undef BOOST_MEM_FN_NAME
  
+ #ifdef BOOST_MEM_FN_ENABLE_CDECL
+ 
+ #define BOOST_MEM_FN_NAME(X) inner_##X##_cdecl
+ #define BOOST_MEM_FN_CC __cdecl
+ 
+ #include <boost/bind/mem_fn_template.hpp>
+ 
+ #undef BOOST_MEM_FN_CC
+ #undef BOOST_MEM_FN_NAME
+ 
+ #endif
+ 
  #ifdef BOOST_MEM_FN_ENABLE_STDCALL
  
  #define BOOST_MEM_FN_NAME(X) inner_##X##_stdcall
***************
*** 128,133 ****
--- 159,178 ----
  #undef BOOST_MEM_FN_NAME2
  #undef BOOST_MEM_FN_CC
  
+ #ifdef BOOST_MEM_FN_ENABLE_CDECL
+ 
+ #define BOOST_MEM_FN_NAME(X) X##_cdecl
+ #define BOOST_MEM_FN_NAME2(X) inner_##X##_cdecl
+ #define BOOST_MEM_FN_CC __cdecl
+ 
+ #include <boost/bind/mem_fn_vw.hpp>
+ 
+ #undef BOOST_MEM_FN_NAME
+ #undef BOOST_MEM_FN_NAME2
+ #undef BOOST_MEM_FN_CC
+ 
+ #endif
+ 
  #ifdef BOOST_MEM_FN_ENABLE_STDCALL
  
  #define BOOST_MEM_FN_NAME(X) X##_stdcall
***************
*** 176,181 ****
--- 221,238 ----
  #undef BOOST_MEM_FN_CC
  #undef BOOST_MEM_FN_NAME
  
+ #ifdef BOOST_MEM_FN_ENABLE_CDECL
+ 
+ #define BOOST_MEM_FN_NAME(X) X##_cdecl
+ #define BOOST_MEM_FN_CC __cdecl
+ 
+ #include <boost/bind/mem_fn_template.hpp>
+ 
+ #undef BOOST_MEM_FN_CC
+ #undef BOOST_MEM_FN_NAME
+ 
+ #endif
+ 
  #ifdef BOOST_MEM_FN_ENABLE_STDCALL
  
  #define BOOST_MEM_FN_NAME(X) X##_stdcall
***************
*** 217,222 ****
--- 274,291 ----
  #undef BOOST_MEM_FN_NAME
  #undef BOOST_MEM_FN_CC
  
+ #ifdef BOOST_MEM_FN_ENABLE_CDECL
+ 
+ #define BOOST_MEM_FN_NAME(X) X##_cdecl
+ #define BOOST_MEM_FN_CC __cdecl
+ 
+ #include <boost/bind/mem_fn_cc.hpp>
+ 
+ #undef BOOST_MEM_FN_NAME
+ #undef BOOST_MEM_FN_CC
+ 
+ #endif
+ 
  #ifdef BOOST_MEM_FN_ENABLE_STDCALL
  
  #define BOOST_MEM_FN_NAME(X) X##_stdcall
*** misc/build/boost-1.30.2/boost/function/function_base.hpp	Fri Jul 18 06:04:54 2003
--- misc/modified/boost-1.30.2/boost/function/function_base.hpp	Thu Aug 10 11:17:30 2006
***************
*** 16,21 ****
--- 16,26 ----
  #ifndef BOOST_FUNCTION_BASE_HEADER
  #define BOOST_FUNCTION_BASE_HEADER
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include <stdexcept>
  #include <string>
  #include <memory>
***************
*** 413,416 ****
--- 418,425 ----
  } // end namespace detail
  } // end namespace boost
  
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif // BOOST_FUNCTION_BASE_HEADER
*** misc/build/boost-1.30.2/boost/iterator_adaptors.hpp	Fri Dec 27 17:51:52 2002
--- misc/modified/boost-1.30.2/boost/iterator_adaptors.hpp	Thu Aug 10 11:33:04 2006
***************
*** 119,124 ****
--- 119,129 ----
  #ifndef BOOST_ITERATOR_ADAPTOR_DWA053000_HPP_
  # define BOOST_ITERATOR_ADAPTOR_DWA053000_HPP_
  
+ # if defined _MSC_VER
+ # pragma warning(push)
+ # pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ # endif
+ 
  # include <boost/iterator.hpp>
  # include <boost/utility.hpp>
  # include <boost/compressed_pair.hpp>
***************
*** 873,879 ****
           return policies().dereference(*this);
      }
  
! #if BOOST_WORKAROUND(BOOST_MSVC, > 0)
  # pragma warning(push)
  # pragma warning( disable : 4284 )
  #endif
--- 878,884 ----
           return policies().dereference(*this);
      }
  
! #if BOOST_WORKAROUND(BOOST_MSVC, < 1300)
  # pragma warning(push)
  # pragma warning( disable : 4284 )
  #endif
***************
*** 882,888 ****
      operator->() const
          { return detail::operator_arrow(*this, iterator_category()); }
  
! #if BOOST_WORKAROUND(BOOST_MSVC, > 0)
  # pragma warning(pop)
  #endif
  
--- 887,893 ----
      operator->() const
          { return detail::operator_arrow(*this, iterator_category()); }
  
! #if BOOST_WORKAROUND(BOOST_MSVC, < 1300)
  # pragma warning(pop)
  #endif
  
***************
*** 1430,1435 ****
--- 1435,1443 ----
  } // namespace boost
  # undef BOOST_ARG_DEPENDENT_TYPENAME
  
+ # if defined _MSC_VER
+ # pragma warning(pop)
+ # endif
  
  #endif
  
*** misc/build/boost-1.30.2/boost/mpl/aux_/ice_cast.hpp	Tue Feb  4 21:21:05 2003
--- misc/modified/boost-1.30.2/boost/mpl/aux_/ice_cast.hpp	Thu Aug 10 11:17:20 2006
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_MPL_AUX_ICE_CAST_HPP_INCLUDED
  #define BOOST_MPL_AUX_ICE_CAST_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/config/workaround.hpp"
  
  #if BOOST_WORKAROUND(__BORLANDC__, BOOST_TESTED_AT(0x561)) \
***************
*** 28,31 ****
--- 33,40 ----
  #   define BOOST_MPL_AUX_ICE_CAST(T, expr) static_cast<T>(expr)
  #endif
  
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif // BOOST_MPL_AUX_ICE_CAST_HPP_INCLUDED
*** misc/build/boost-1.30.2/boost/mpl/aux_/integral_wrapper.hpp	Thu Mar 13 13:13:32 2003
--- misc/modified/boost-1.30.2/boost/mpl/aux_/integral_wrapper.hpp	Thu Aug 10 11:17:06 2006
***************
*** 17,22 ****
--- 17,27 ----
  
  // no include guards, the header is intended for multiple inclusion!
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/ice_cast.hpp"
  #include "boost/mpl/aux_/config/nttp.hpp"
  #include "boost/mpl/aux_/config/static_constant.hpp"
***************
*** 84,86 ****
--- 89,95 ----
  #undef AUX_WRAPPER_PARAMS
  #undef AUX_WRAPPER_INST
  #undef AUX_WRAPPER_VALUE_TYPE
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
*** misc/build/boost-1.30.2/boost/mpl/aux_/lambda_support.hpp	Sat Mar  8 08:10:07 2003
--- misc/modified/boost-1.30.2/boost/mpl/aux_/lambda_support.hpp	Thu Aug 10 11:16:54 2006
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_MPL_AUX_LAMBDA_SUPPORT_HPP_INCLUDED
  #define BOOST_MPL_AUX_LAMBDA_SUPPORT_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/config/lambda.hpp"
  
  #if !defined(BOOST_MPL_NO_FULL_LAMBDA_SUPPORT)
***************
*** 133,136 ****
--- 138,145 ----
  
  #endif // BOOST_MPL_NO_FULL_LAMBDA_SUPPORT
  
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif // BOOST_MPL_AUX_LAMBDA_SUPPORT_HPP_INCLUDED
*** misc/build/boost-1.30.2/boost/mpl/aux_/logical_op.hpp	Wed Feb 26 00:10:54 2003
--- misc/modified/boost-1.30.2/boost/mpl/aux_/logical_op.hpp	Thu Aug 10 11:16:40 2006
***************
*** 17,22 ****
--- 17,27 ----
  
  // no include guards, the header is intended for multiple inclusion!
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #if !defined(BOOST_MPL_PREPROCESSING_MODE)
  #   include "boost/mpl/bool.hpp"
  #   include "boost/mpl/aux_/nested_type_wknd.hpp"
***************
*** 167,169 ****
--- 172,178 ----
  #undef AUX_LOGICAL_OP_NAME
  #undef AUX_LOGICAL_OP_VALUE1
  #undef AUX_LOGICAL_OP_VALUE2
+ 
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
*** misc/build/boost-1.30.2/boost/mpl/if.hpp	Thu Mar 13 13:13:29 2003
--- misc/modified/boost-1.30.2/boost/mpl/if.hpp	Thu Aug 10 11:16:06 2006
***************
*** 17,22 ****
--- 17,27 ----
  //
  // See http://www.boost.org/libs/mpl for documentation.
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/value_wknd.hpp"
  #include "boost/mpl/aux_/ice_cast.hpp"
  #include "boost/mpl/aux_/void_spec.hpp"
***************
*** 174,177 ****
--- 179,186 ----
  } // namespace mpl
  } // namespace boost
  
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif // BOOST_MPL_IF_HPP_INCLUDED
*** misc/build/boost-1.30.2/boost/mpl/integral_c.hpp	Thu Mar 13 13:13:29 2003
--- misc/modified/boost-1.30.2/boost/mpl/integral_c.hpp	Thu Aug 10 11:15:52 2006
***************
*** 18,23 ****
--- 18,28 ----
  //
  // See http://www.boost.org/libs/mpl for documentation.
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/integral_c_fwd.hpp"
  #include "boost/mpl/aux_/ice_cast.hpp"
  #include "boost/mpl/aux_/config/ctps.hpp"
***************
*** 50,53 ****
--- 55,62 ----
  }}
  #endif
  
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif // BOOST_MPL_INTEGRAL_C_HPP_INCLUDED
*** misc/build/boost-1.30.2/boost/mpl/integral_c_fwd.hpp	Thu Mar 13 13:13:30 2003
--- misc/modified/boost-1.30.2/boost/mpl/integral_c_fwd.hpp	Thu Aug 10 11:15:36 2006
***************
*** 18,23 ****
--- 18,28 ----
  //
  // See http://www.boost.org/libs/mpl for documentation.
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/aux_/config/workaround.hpp"
  
  namespace boost { namespace mpl {
***************
*** 29,32 ****
--- 34,41 ----
  #endif
  }}
  
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif // BOOST_MPL_INTEGRAL_C_FWD_HPP_INCLUDED
*** misc/build/boost-1.30.2/boost/mpl/is_sequence.hpp	Wed Feb 26 00:10:43 2003
--- misc/modified/boost-1.30.2/boost/mpl/is_sequence.hpp	Thu Aug 10 11:15:14 2006
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_MPL_IS_SEQUENCE_HPP_INCLUDED
  #define BOOST_MPL_IS_SEQUENCE_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/not.hpp"
  #include "boost/mpl/or.hpp"
  #include "boost/mpl/begin_end.hpp"
***************
*** 98,101 ****
--- 103,110 ----
  
  }} // namespace boost::mpl
  
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif // BOOST_MPL_IS_SEQUENCE_HPP_INCLUDED
*** misc/build/boost-1.30.2/boost/mpl/sequence_tag.hpp	Mon Feb 24 01:50:53 2003
--- misc/modified/boost-1.30.2/boost/mpl/sequence_tag.hpp	Thu Aug 10 11:14:58 2006
***************
*** 17,22 ****
--- 17,27 ----
  #ifndef BOOST_MPL_SEQUENCE_TAG_HPP_INCLUDED
  #define BOOST_MPL_SEQUENCE_TAG_HPP_INCLUDED
  
+ #if defined _MSC_VER
+ #pragma warning(push)
+ #pragma warning(disable: 4668) // "id is not defined as a preprocessor macro"
+ #endif
+ 
  #include "boost/mpl/sequence_tag_fwd.hpp"
  #include "boost/mpl/aux_/has_tag.hpp"
  #include "boost/mpl/aux_/has_begin.hpp"
***************
*** 130,133 ****
--- 135,142 ----
  
  }} // namespace boost::mpl
  
+ #if defined _MSC_VER
+ #pragma warning(pop)
+ #endif
+ 
  #endif // BOOST_MPL_SEQUENCE_TAG_HPP_INCLUDED

